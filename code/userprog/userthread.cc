#ifdef CHANGED

#include <iostream>
#include "userthread.h"

typedef struct schmurtz
{
  int f, arg, stack, exit;
} schmurt;

static void StartUserThread (void* s)
{
  schmurt* sh = (schmurt*) s;
  int i;
  for (i = 0; i < NumTotalRegs; i++)
    machine->WriteRegister (i, 0);
  
  machine->WriteRegister (StackReg, currentThread->space->addrCalcul(sh->stack));
  DEBUG ('x', "fonction %d dans registre PCReg\n", sh->f);
  machine->WriteRegister (PCReg, sh->f);
  DEBUG ('x', "fonction suivante %d dans registre NextPCReg\n", sh->f + 4);
  machine->WriteRegister (NextPCReg, sh->f + 4);
  DEBUG ('x', "arg %d dans r4\n", sh->arg);
  machine->WriteRegister (4, sh->arg);
  machine->WriteRegister (31, sh->exit);
  delete sh;
  machine->Run ();
}

int do_ThreadCreate (int f, int arg, int exit)
{
  schmurt* s = new schmurt;
  s->f = f;
  s->arg = arg;
  s->exit = exit;
  s->stack = currentThread->space->AllocateUserStack ();
  if (s->stack == -1)
  {
    delete s;
    return -1;
  }
  Thread* newThread = new Thread ("newThread");
  newThread->setNumPage (s->stack);
  newThread->Start (StartUserThread, s);
  return 0;
}

void do_ThreadExit ()
{
  currentThread->space->DesallocateUserStack ();
  currentThread->Finish ();
}
#endif //CHANGED
