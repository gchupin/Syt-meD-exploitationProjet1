// exception.cc 
//      Entry point into the Nachos kernel from user programs.
//      There are two kinds of things that can cause control to
//      transfer back to here from user code:
//
//      syscall -- The user code explicitly requests to call a procedure
//      in the Nachos kernel.  Right now, the only function we support is
//      "Halt".
//
//      exceptions -- The user code does something that the CPU can't handle.
//      For instance, accessing memory that doesn't exist, arithmetic errors,
//      etc.  
//
//      Interrupts (which can also cause control to transfer from user
//      code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

#ifdef CHANGED
#include "userthread.h"
#include "synch.h"

// Global
int AddrSpace::nb_threads;
const int nb_semaphore = 10;
Semaphore* mutex = new Semaphore ("mutex", 1);
Semaphore* lock = new Semaphore ("lock", 0);
Semaphore* find = new Semaphore("sem find", 1);
Semaphore* semTab[nb_semaphore];
BitMap* semBM = new BitMap(nb_semaphore);
#endif //CHANGED

//----------------------------------------------------------------------
// UpdatePC : Increments the Program Counter register in order to resume
// the user program immediately after the "syscall" instruction.
//----------------------------------------------------------------------
static void
UpdatePC ()
{
    int pc = machine->ReadRegister (PCReg);
    machine->WriteRegister (PrevPCReg, pc);
    pc = machine->ReadRegister (NextPCReg);
    machine->WriteRegister (PCReg, pc);
    pc += 4;
    machine->WriteRegister (NextPCReg, pc);
}


//----------------------------------------------------------------------
// ExceptionHandler
//      Entry point into the Nachos kernel.  Called when a user program
//      is executing, and either does a syscall, or generates an addressing
//      or arithmetic exception.
//
//      For system calls, the following is the calling convention:
//
//      system call code -- r2
//              arg1 -- r4
//              arg2 -- r5
//              arg3 -- r6
//              arg4 -- r7
//
//      The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//      "which" is the kind of exception.  The list of possible exceptions 
//      are in machine.h.
//----------------------------------------------------------------------

void
ExceptionHandler (ExceptionType which)
{
    int type = machine->ReadRegister (2);      

    switch (which)
      {
	case SyscallException:
          {
	    switch (type)
	      {
              #ifdef CHANGED
	      case SC_Exit:
		{
		  while (currentThread->space->nb_threads > 0)
		    lock->P();
		  printf("\nvaleur de retour %d\n",machine->ReadRegister (4));
		  delete mutex;
		  delete lock;
		  delete currentThread->space;
		  interrupt->Halt ();
		  break;
		}		
              #endif // CHANGED
	      case SC_Halt:
		{
		  DEBUG ('s', "Shutdown, initiated by user program.\n");
		  delete mutex;
		  delete lock;
		  interrupt->Halt ();
		  break;
		}
              #ifdef CHANGED
	      case SC_PutChar:
		{
		  DEBUG ('s', "PutChar.\n");
		  int ch = machine->ReadRegister (4);
		  synchConsole->SynchPutChar (ch);
		  break;
		}
	      case SC_PutString:
		{
		  DEBUG ('s', "PutString.\n");
		  int from = machine->ReadRegister (4);
		  char* dest = (char*) malloc (MAX_STRING_SIZE * sizeof (char));
		  int n;
		  do
		    {
		      n = synchConsole->copyStringFromMachine (from, dest, MAX_STRING_SIZE);
		      from += n;
		      synchConsole->SynchPutString (dest);
		    }
		  while (n == MAX_STRING_SIZE);
		  free (dest);
		  break;
		}
	      case SC_GetChar:
		{
		  DEBUG ('s', "GetChar.\n");
		  machine->WriteRegister (2, synchConsole->SynchGetChar());
		  break;		     
		}
	      case SC_GetString:
		{
		  DEBUG ('s', "GetString.\n");
		  int to = machine->ReadRegister (4);
		  int size = machine->ReadRegister (5);
		  char* from = (char*) malloc (size * sizeof (char));
		  synchConsole->SynchGetString (from, size);
		  synchConsole->copyStringToMachine (to, from, size);
		  free (from);
		  break;
		}
	      case SC_PutInt:
		{
		  DEBUG ('s', "PutInt.\n");
		  int n = machine->ReadRegister (4);
		  synchConsole->SynchPutInt (n);
		  break;
		}
	      case SC_GetInt:
		{
		  DEBUG ('s', "GetInt.\n");
		  int n;
		  int to = machine->ReadRegister (4);
		  synchConsole->SynchGetInt (&n);
		  machine->WriteMem (to, 4, n);
		  break;
		}
	      case SC_ThreadCreate:
		{
		  int f = machine->ReadRegister (4);
		  int arg = machine->ReadRegister (5);
		  int exit = machine->ReadRegister (6);
		  int success = do_ThreadCreate (f, arg, exit);
		  if (success != -1)
		    {
		      mutex->P();
		      ++currentThread->space->nb_threads;
		      mutex->V();
		    }
		  machine->WriteRegister(2, success);
		  break;
		}
	      case SC_ThreadExit:
		{
		  mutex->P();
		  --currentThread->space->nb_threads;
		  if (currentThread->space->nb_threads <= 0)
		    lock->V();
		  mutex->V();
		  do_ThreadExit ();
		  break;
		}
	      case SC_P:
		{
		  int sem = machine->ReadRegister (4);
		  semTab[sem]->P ();
		  break;
		}
	      case SC_V:
		{
		  int sem = machine->ReadRegister (4);
		  semTab[sem]->V ();
		  break;
		}
	      case SC_SemCreate:
		{
		  int initialValue = machine->ReadRegister (4);
		  find->P();
		  int caseSem = semBM->Find();
		  //Not enough place to create another semaphore.
		  if (caseSem == -1)
		    ASSERT(caseSem != -1); 
		  find->V();
		  semTab[caseSem] = new Semaphore("debugname", initialValue);
		  machine->WriteRegister (2, caseSem);
		  break;
		}
	      case SC_SemDelete:
		{
		  int sem_t = machine->ReadRegister (4);
		  delete semTab[sem_t];
		  semBM->Clear (sem_t);
		  break;
		}
              #endif //CHANGED
		  
		default:
		  {
		    printf("Unimplemented system call %d\n", type);
		    ASSERT(FALSE);
		  }
	      }
	    // Do not forget to increment the pc before returning!
	    UpdatePC ();
	    break;
	  }

	case PageFaultException:
	  if (!type) {
	    printf("NULL dereference at PC %x!\n", machine->registers[PCReg]);
	    ASSERT (FALSE);
	  } else {
	    printf ("Page Fault at address %x at PC %x\n", type, machine->registers[PCReg]);
	    ASSERT (FALSE);	// For now
	  }

	default:
	  printf ("Unexpected user mode exception %d %d at PC %x\n", which, type, machine->registers[PCReg]);
	  ASSERT (FALSE);
      }
}
