#ifdef CHANGED

#include "copyright.h"
#include "system.h"
#include "synchconsole.h"
#include "synch.h"
#include "translate.h"

static Semaphore* readAvail;
static Semaphore* writeDone;

static void ReadAvailHandler(void* arg)
{
  (void) arg; readAvail->V();
}

static void WriteDoneHandler(void* arg)
{
  (void) arg; writeDone->V();
}

SynchConsole::SynchConsole(const char* in, const char* out)
{
  readAvail = new Semaphore("read avail", 0);
  writeDone = new Semaphore("write done", 0);
  console = new Console (in, out, ReadAvailHandler, WriteDoneHandler, 0);
}

SynchConsole::~SynchConsole()
{
  delete console;
  delete writeDone;
  delete readAvail;
}

void SynchConsole::SynchPutChar(int ch)
{
  console->PutChar (ch);
  writeDone->P ();
}

int SynchConsole::SynchGetChar()
{
  readAvail->P ();
  return console->GetChar ();
}

void SynchConsole::SynchPutString(const char s[])
{
  int cpt = 0;
  char ch;
  while ((ch = s[cpt++]) != '\0')
    {
      SynchPutChar(ch);
    }
}

void SynchConsole::SynchGetString(char* s, int n)
{
  int cpt = 0;
  do
    {
      s[cpt] = SynchGetChar ();
    }
  while (s[cpt] != '\0' && s[cpt] != '\n' && cpt++ <= n);
}

int SynchConsole::copyStringFromMachine (int from, char* to, unsigned size)
{
  int i = from;
  unsigned cpt = 0;
  int value;
  while (cpt < size)
    {
      machine->ReadMem (i, 1, &value);
      to[cpt++] = (char) value;
      if ((char) value == '\0')
	break;
      ++i;
    }
  to[cpt] = '\0';
  return cpt;
}

int SynchConsole::copyStringToMachine (int to, char* from, unsigned size)
{
  int i = to;
  unsigned cpt = 0;
  int value;
  while (cpt < size)
    {
      value = (int) from[cpt];
      //EOF doesn't need to be in so we quit before to copy it
      if (value == EOF)
	break;
      machine->WriteMem(i, 1, value);
      ++cpt;
      ++i;
      //If it's a newline or the null character we put it and end the copy
      if ((char) value == '\n' || (char) value == '\0')
	break;
    }
  //In all case we put '\0' in the final case
  machine->WriteMem(i, 1, '\0');
  return cpt;
}

void SynchConsole::SynchPutInt (int n)
{
  char s[MAX_STRING_SIZE];
  snprintf(s, MAX_STRING_SIZE, "%d", n);
  SynchPutString (s);
}

void SynchConsole::SynchGetInt (int *n)
{
  char s[MAX_STRING_SIZE];
  SynchGetString (s, MAX_STRING_SIZE);
  sscanf (s, "%d", n);
}

#endif // CHANGED
